Analyze this portion of the codebase and extract key information about functionality, dependencies, and features:

print(scaled_df1.duplicated().sum())
print(scaled_df1.isnull().sum())
```

**1-3: BE4**

**4-6: ABE8**

**7-9: Cas9**

**10-12: Utelectro**

**13-15: BE4**

**16-18: ABE8**

**19-21: Cas9**

**22-24: Utelectro**

**25-27: dCas9**

**28-30: BE4alone**

**31-33: ABE8alone**

**34-39: Unedited**

```python
df_trimmed = scaled_df1.iloc[:, :100]
df_trimmed
```

```python
mechanisms = {
    "BE4": ["GSM6745599", "GSM6745600", "GSM6745601", "GSM6745611", "GSM6745612", "GSM6745613"],
    "ABE8": ["GSM6745602", "GSM6745603", "GSM6745604", "GSM6745614", "GSM6745615", "GSM6745616"],
    "Cas9": ["GSM6745605", "GSM6745606", "GSM6745607", "GSM6745617", "GSM6745618", "GSM6745619"],
    "Utelectro": ["GSM6745609", "GSM6745610", "GSM6745620", "GSM6745621", "GSM6745622"],
    "dCas9": ["GSM6745623", "GSM6745624", "GSM6745625"],
    "BE4alone": ["GSM6745626", "GSM6745627", "GSM6745628"],
    "ABE8alone": ["GSM6745629", "GSM6745630", "GSM6745631"],
    "UT": ["GSM6745632", "GSM6745633", "GSM6745634", "GSM6745635", "GSM6745636", "GSM6745637"]
}
#GSM6745608 is missing from Utelectro
```

```python
df_be4 = df_trimmed.loc[mechanisms["BE4"]]
df_abe8 = df_trimmed.loc[mechanisms["ABE8"]]
df_cas9 = df_trimmed.loc[mechanisms["Cas9"]]
df_utelectro = df_trimmed.loc[mechanisms["Utelectro"]]
df_dcas9 = df_trimmed.loc[mechanisms["dCas9"]]
df_be4alone = df_trimmed.loc[mechanisms["BE4alone"]]
df_abe8alone = df_trimmed.loc[mechanisms["ABE8alone"]]

df_edited = df_trimmed.loc[mechanisms["BE4"]+mechanisms["ABE8"]+mechanisms["Cas9"]+mechanisms["Utelectro"]+mechanisms["dCas9"]+mechanisms["BE4alone"]+mechanisms["ABE8alone"]]
df_ut = df_trimmed.loc[mechanisms["UT"]]

```

```python
be4_median = df_be4.median()
abe8_median = df_abe8.median()
cas9_median = df_cas9.median()
utelectro_median = df_utelectro.median()
dcas9_median = df_dcas9.median()
be4alone_median = df_be4alone.median()
abe8alone_median = df_abe8alone.median()

edited_median = df_edited.median()

ut_median = df_ut.median()
```

```python
edited_median

```

```python
ut_median
```

**Boxplots of the first 100 genes**

```python
for i in range(100):
  combined_df = pd.concat([df_edited.iloc[:, i:i+1], df_ut.iloc[:, i:i+1]], axis=1)

  # Create side-by-side boxplots
  combined_df.boxplot()
  plt.title('Edited (Left) vs. Unedited (Right) #' + str(i+1))
  plt.ylabel('Values')
  plt.xticks(rotation=45)  # Rotate x labels for better visibility
  plt.show()
```

**Plots that looked most interesting:**




**4**

**5**

**12**

**18**

**29**

**34**

**38**

**41**

**43**

**44**

**45**

**55**

**63**

**64**

**68**

**77**

**78**

**81**








**Filtering for genes that are significant**

```python
min_median_difference = 0.2
#min_standard_deviation_difference = 0.5
min_standard_deviation_percent_difference = 50
```

```python
df_be4_full = scaled_df1.loc[mechanisms["BE4"]]
df_abe8_full = scaled_df1.loc[mechanisms["ABE8"]]
df_cas9_full = scaled_df1.loc[mechanisms["Cas9"]]
df_utelectro_full = scaled_df1.loc[mechanisms["Utelectro"]]
df_dcas9_full = scaled_df1.loc[mechanisms["dCas9"]]
df_be4alone_full = scaled_df1.loc[mechanisms["BE4alone"]]
df_abe8alone_full = scaled_df1.loc[mechanisms["ABE8alone"]]

df_edited_full = scaled_df1.loc[mechanisms["BE4"]+mechanisms["ABE8"]+mechanisms["Cas9"]+mechanisms["Utelectro"]+mechanisms["dCas9"]+mechanisms["BE4alone"]+mechanisms["ABE8alone"]]
df_ut_full = scaled_df1.loc[mechanisms["UT"]]
```

```python
relevant_genes = []
# loop through columns by index
for i in range(len(scaled_df1.columns)):
  gene_name = scaled_df1.columns[i]
  col_data_edited = df_edited_full.iloc[:, i]
  col_data_ut = df_ut_full.iloc[:, i]
  median_edited = col_data_edited.median()
  median_ut = col_data_ut.median()
  std_edited = col_data_edited.std()
  std_ut = col_data_ut.std()
  if abs(median_edited - median_ut) >= min_median_difference or (std_ut != 0 and std_edited/std_ut >= (1+min_standard_deviation_percent_difference/100)) or (std_edited != 0 and std_ut/std_edited >= (1+min_standard_deviation_percent_difference/100)):
    relevant_genes.append(gene_name)
print(len(relevant_genes))
#print(relevant_genes)
print("Total Columns: " + str(len(scaled_df1.columns)))
print("Columns Eliminated: " + str((len(scaled_df1.columns) - len(relevant_genes))))


```



### File: Code/EDA_sj/relevant_genes_1.2_275.txt